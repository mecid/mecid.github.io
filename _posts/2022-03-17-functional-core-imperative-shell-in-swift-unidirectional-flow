---
title: Functional core Imperative shell in Swift. Unidirectional Flow.
layout: post
---

A few weeks ago, we talked about the idea of Functional Core and Imperative shell in Swift. The goal is to extract the pure logic using value types and keep side effects in the thin object layer. This week, we will look at how we can apply this approach in an opinionated way by using unidirectional flow.

> If you are not familiar with the idea of unidirectional flow, I highly encourage you to read my series of posts about "Redux-like state container in SwiftUI".

#### Functional Core
The functional core is the layer responsible for all the logic in our app that we want to verify using unit tests. It should be pure, without any side effects. We want to provide the input and verify the output. Usually, the implementation of unidirectional flow requires many reducer functions that accept the state and action and return a new state. Let's define the reducer function in code.

=====================================================

As you can see, the reducer function takes the current state and action to apply on that state and returns a new state. I'm working on the app for intermittent fasting tracking. Let's take a look at how I could implement the timer logic.

=====================================================

Here is the real example from my codebase implementing timer management logic. As you can see, it is pure and doesn't have any side effects. It allows me to quickly verify the logic using unit tests without mocks and stubs.

=====================================================

Value types like structs and enums are great tools for implementing app logic in a pure and very testable. But we still need side effects. For example, I want to share the timer state with my friends using CloudKit.

#### Imperative Shell
The imperative shell is the object layer holding the app's state represented by a value type. We also utilize the object layer to make side-effects and apply results on top of the state. Let's start by defining a generic object that holds the state.

=====================================================

Here is the imperative shell defined using the Store class. As you can see, we use the object layer to hold the app state represented by a value type. We also provide thread safety by utilizing the MainActor and allowing mutations only by feeding actions into the store using the *send* method on Store type. This is how we implement unidirectional flow with the idea of Functional core and Imperative shell. But we still miss side effects.

#### Side effects
The imperative shell should provide us with a way to make side effects. We should separate side effects from the pure logic of our app, but we still want to test side effects using integration tests. Let's introduce a new type called Middleware that defines a side effect handler.

=====================================================

The main idea behind the Middleware type is to intercept pure actions, make side effects like async requests, and return a new action that we can feed into the store and reduce. Let's add this functionality to the Store type.

=====================================================

As you can see, we use the new Swift concurrency feature to implement async work inside the Store type. It allows us to run our side effects in parallel and feed the actions into the store. We secure access to our state by marking the Store type with @MainActor. Using the TaskGroup, we automatically gain the cooperative cancellation of side effects. The Store type also holds all the dependencies like networking, notification center, etc., to provide them to middlewares.

=====================================================

And here is the example code showing how to implement a middleware. As you can see, we intercept the action fed into the store, make an async request, and provide another action to the system.

=====================================================

#### Conclusion
I use the idea of Functional core and Imperative shell in two of my apps and enjoy the infrastructure it provides me.
